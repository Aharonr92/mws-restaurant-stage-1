{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","mapLoaded","document","addEventListener","fetchNeighborhoods","fetchCuisines","updateRestaurants","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","setTimeout","addMarkersToMap","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","lazyLoadImages","m","setMap","ul","restaurant","createRestaurantHTML","li","image","className","setAttribute","imageUrlForRestaurant","alt","name","address","more","title","href","urlForRestaurant","lozad","observe","marker","mapMarkerForRestaurant","event","addListener","location","url","push","style","backgroundImage","r","latlng","join","loadRealMap","script","type","src","body","appendChild"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants, neighborhoods, cuisines, map;\r\nvar markers = [];\r\nlet mapLoaded = false;\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  updateRestaurants();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  mapLoaded = true;\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  setTimeout(addMarkersToMap(restaurants), 0)\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n      addMarkersToMap(restaurants);\r\n      lazyLoadImages()\r\n    }\r\n  })\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img lozad';\r\n  image.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant));\r\n  image.alt = `photo of ${restaurant.name} restaurant`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.title = restaurant.name;\r\n  more.setAttribute('aria-label', restaurant.name);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more);\r\n\r\n  return li\r\n};\r\n\r\n\r\n/**\r\n * Lazy load images\r\n */\r\nlazyLoadImages = () => {\r\n  const observer = lozad();\r\n  observer.observe();\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  if (mapLoaded) {\r\n    restaurants.forEach(restaurant => {\r\n      // Add marker to the map\r\n      const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n      google.maps.event.addListener(marker, 'click', () => {\r\n        window.location.href = marker.url\r\n      });\r\n      self.markers.push(marker);\r\n    });\r\n  } else {\r\n    document.getElementById('map').style.backgroundImage = `url(https://maps.googleapis.com/maps/api/staticmap?size=640x200&markers=size:mid|${restaurants.map(r => `${r.latlng.lat},${r.latlng.lng}|`).join('')}&key=AIzaSyDKsWF94cMGUciBs96YIpbCmexfRKT75x4&scale=2&zoom=10&maptype=terrain)`\r\n  }\r\n};\r\n\r\nloadRealMap = () => {\r\n  if (mapLoaded) return;\r\n  const script = document.createElement('script');\r\n  script.type = 'text/javascript';\r\n  script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyDKsWF94cMGUciBs96YIpbCmexfRKT75x4&libraries=places&callback=initMap';\r\n  document.body.appendChild(script);\r\n};\r\n"]}