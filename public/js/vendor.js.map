{"version":3,"sources":["db_helper.js","register_sw.js","lozad.min.js"],"names":["DBHelper","DATABASE_URL","[object Object]","callback","xhr","XMLHttpRequest","open","onload","status","restaurants","JSON","parse","responseText","error","send","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","navigator","serviceWorker","register","t","e","exports","module","define","amd","lozad","this","setAttribute","Object","assign","arguments","length","n","prototype","hasOwnProperty","call","document","documentMode","rootMargin","threshold","load","nodeName","toLowerCase","createElement","getAttribute","src","appendChild","srcset","style","backgroundImage","loaded","o","d","u","c","s","g","f","l","window","IntersectionObserver","a","forEach","intersectionRatio","unobserve","target","observe","Element","NodeList","querySelectorAll","triggerLoad"],"mappings":"MAGAA,SAMAC,0BACA,MAAA,oCAMAC,wBAAAC,GACA,IAAAC,EAAA,IAAAC,eACAD,EAAAE,KAAA,MAAAN,SAAAC,cACAG,EAAAG,OAAA,MACA,GAAA,MAAAH,EAAAI,OAAA,CACA,MAAAC,EAAAC,KAAAC,MAAAP,EAAAQ,cACAT,EAAA,KAAAM,OACA,CACA,MAAAI,wCAAAT,EAAAI,SACAL,EAAAU,EAAA,SAGAT,EAAAU,OAMAZ,2BAAAa,EAAAZ,GAEAH,SAAAgB,iBAAA,CAAAH,EAAAJ,KACA,GAAAI,EACAV,EAAAU,EAAA,UACA,CACA,MAAAI,EAAAR,EAAAS,KAAAC,GAAAA,EAAAJ,IAAAA,GACAE,EACAd,EAAA,KAAAc,GAEAd,EAAA,4BAAA,SASAD,gCAAAkB,EAAAjB,GAEAH,SAAAgB,iBAAA,CAAAH,EAAAJ,KACA,GAAAI,EACAV,EAAAU,EAAA,UACA,CAEA,MAAAQ,EAAAZ,EAAAa,OAAAH,GAAAA,EAAAI,eAAAH,GACAjB,EAAA,KAAAkB,MAQAnB,qCAAAsB,EAAArB,GAEAH,SAAAgB,iBAAA,CAAAH,EAAAJ,KACA,GAAAI,EACAV,EAAAU,EAAA,UACA,CAEA,MAAAQ,EAAAZ,EAAAa,OAAAH,GAAAA,EAAAK,eAAAA,GACArB,EAAA,KAAAkB,MAQAnB,+CAAAkB,EAAAI,EAAArB,GAEAH,SAAAgB,iBAAA,CAAAH,EAAAJ,KACA,GAAAI,EACAV,EAAAU,EAAA,UACA,CACA,IAAAQ,EAAAZ,EACA,QAAAW,IACAC,EAAAA,EAAAC,OAAAH,GAAAA,EAAAI,eAAAH,IAEA,QAAAI,IACAH,EAAAA,EAAAC,OAAAH,GAAAA,EAAAK,eAAAA,IAEArB,EAAA,KAAAkB,MAQAnB,0BAAAC,GAEAH,SAAAgB,iBAAA,CAAAH,EAAAJ,KACA,GAAAI,EACAV,EAAAU,EAAA,UACA,CAEA,MAAAY,EAAAhB,EAAAiB,IAAA,CAAAC,EAAAC,IAAAnB,EAAAmB,GAAAJ,cAEAK,EAAAJ,EAAAH,OAAA,CAAAK,EAAAC,IAAAH,EAAAK,QAAAH,KAAAC,GACAzB,EAAA,KAAA0B,MAQA3B,qBAAAC,GAEAH,SAAAgB,iBAAA,CAAAH,EAAAJ,KACA,GAAAI,EACAV,EAAAU,EAAA,UACA,CAEA,MAAAkB,EAAAtB,EAAAiB,IAAA,CAAAC,EAAAC,IAAAnB,EAAAmB,GAAAL,cAEAS,EAAAD,EAAAT,OAAA,CAAAK,EAAAC,IAAAG,EAAAD,QAAAH,KAAAC,GACAzB,EAAA,KAAA6B,MAQA9B,wBAAAe,GACA,8BAAAA,EAAAF,KAMAb,6BAAAe,GACA,cAAAA,EAAAgB,kBAMA/B,8BAAAe,EAAAS,GACA,OAAA,IAAAQ,OAAAC,KAAAC,QACAC,SAAApB,EAAAqB,OACAC,MAAAtB,EAAAuB,KACAC,IAAAzC,SAAA0C,iBAAAzB,GACAS,IAAAA,EACAiB,UAAAT,OAAAC,KAAAS,UAAAC,QClKA,kBAAAC,WACAA,UAAAC,cAAAC,SAAA,UCEA,SAAAC,EAAAC,GAAA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,IAAA,mBAAAG,QAAAA,OAAAC,IAAAD,OAAAH,GAAAD,EAAAM,MAAAL,IAAA,CAAAM,KAAA,WAAA,aAAA,SAAAP,EAAAA,GAAAA,EAAAQ,aAAA,eAAA,GAAA,IAAAP,EAAAQ,OAAAC,QAAA,SAAAV,GAAA,IAAA,IAAAC,EAAA,EAAAA,EAAAU,UAAAC,OAAAX,IAAA,CAAA,IAAA/B,EAAAyC,UAAAV,GAAA,IAAA,IAAAY,KAAA3C,EAAAuC,OAAAK,UAAAC,eAAAC,KAAA9C,EAAA2C,KAAAb,EAAAa,GAAA3C,EAAA2C,IAAA,OAAAb,GAAA9B,EAAA+C,SAAAC,aAAAL,GAAAM,WAAA,MAAAC,UAAA,EAAAC,KAAA,SAAArB,GAAA,GAAA,YAAAA,EAAAsB,SAAAC,cAAA,CAAA,IAAAtB,EAAAgB,SAAAO,cAAA,OAAAtD,GAAA8B,EAAAyB,aAAA,gBAAAxB,EAAAyB,IAAA1B,EAAAyB,aAAA,eAAAzB,EAAA2B,YAAA1B,GAAAD,EAAAyB,aAAA,cAAAzB,EAAA0B,IAAA1B,EAAAyB,aAAA,aAAAzB,EAAAyB,aAAA,iBAAAzB,EAAA4B,OAAA5B,EAAAyB,aAAA,gBAAAzB,EAAAyB,aAAA,2BAAAzB,EAAA6B,MAAAC,gBAAA,OAAA9B,EAAAyB,aAAA,yBAAA,MAAAM,OAAA,cAAAC,EAAA,SAAAhC,GAAA,MAAA,SAAAA,EAAAyB,aAAA,gBAAA,OAAA,WAAA,IAAAvD,EAAAyC,UAAAC,OAAA,QAAA,IAAAD,UAAA,GAAAA,UAAA,GAAA,SAAAsB,EAAAtB,UAAAC,OAAA,QAAA,IAAAD,UAAA,GAAAA,UAAA,MAAAuB,EAAAjC,KAAAY,EAAAoB,GAAAE,EAAAD,EAAAf,WAAAiB,EAAAF,EAAAd,UAAAiB,EAAAH,EAAAb,KAAAiB,EAAAJ,EAAAH,OAAAQ,OAAA,EAAA,OAAAC,OAAAC,uBAAAF,EAAA,IAAAE,qBAAA,SAAAxC,EAAA/B,GAAA,OAAA,SAAA2C,EAAA6B,GAAA7B,EAAA8B,QAAA,SAAA9B,GAAAA,EAAA+B,kBAAA,IAAAF,EAAAG,UAAAhC,EAAAiC,QAAAd,EAAAnB,EAAAiC,UAAA7C,EAAAY,EAAAiC,QAAA9C,EAAAa,EAAAiC,QAAA5E,EAAA2C,EAAAiC,aAAAJ,CAAAL,EAAAC,IAAAnB,WAAAgB,EAAAf,UAAAgB,MAAAW,QAAA,WAAA,IAAA,IAAA9C,EAAA,SAAAD,GAAA,OAAAA,aAAAgD,SAAAhD,GAAAA,aAAAiD,SAAAjD,EAAAiB,SAAAiC,iBAAAlD,GAAArB,CAAAT,GAAA2C,EAAA,EAAAA,EAAAZ,EAAAW,OAAAC,IAAAmB,EAAA/B,EAAAY,MAAA0B,EAAAA,EAAAQ,QAAA9C,EAAAY,KAAAwB,EAAApC,EAAAY,IAAAb,EAAAC,EAAAY,IAAAyB,EAAArC,EAAAY,OAAAsC,YAAA,SAAAlD,GAAA+B,EAAA/B,KAAAoC,EAAApC,GAAAD,EAAAC,GAAAqC,EAAArC","file":"vendor.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    return \"http://localhost:1337/restaurants\";\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type === cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood === neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine !== 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type === cuisine);\r\n        }\r\n        if (neighborhood !== 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood === neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    return new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n  }\r\n}\r\n","if ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js')\n}","/*! lozad.js - v1.3.0 - 2018-02-16\n* https://github.com/ApoorvSaxena/lozad.js\n* Copyright (c) 2018 Apoorv Saxena; Licensed MIT */\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.lozad=e()}(this,function(){\"use strict\";function t(t){t.setAttribute(\"data-loaded\",!0)}var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},r=document.documentMode,n={rootMargin:\"0px\",threshold:0,load:function(t){if(\"picture\"===t.nodeName.toLowerCase()){var e=document.createElement(\"img\");r&&t.getAttribute(\"data-iesrc\")&&(e.src=t.getAttribute(\"data-iesrc\")),t.appendChild(e)}t.getAttribute(\"data-src\")&&(t.src=t.getAttribute(\"data-src\")),t.getAttribute(\"data-srcset\")&&(t.srcset=t.getAttribute(\"data-srcset\")),t.getAttribute(\"data-background-image\")&&(t.style.backgroundImage=\"url(\"+t.getAttribute(\"data-background-image\")+\")\")},loaded:function(){}},o=function(t){return\"true\"===t.getAttribute(\"data-loaded\")},a=function(e,r){return function(n,a){n.forEach(function(n){n.intersectionRatio>0&&(a.unobserve(n.target),o(n.target)||(e(n.target),t(n.target),r(n.target)))})}},i=function(t){return t instanceof Element?[t]:t instanceof NodeList?t:document.querySelectorAll(t)};return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\".lozad\",d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=e({},n,d),c=u.rootMargin,s=u.threshold,g=u.load,f=u.loaded,l=void 0;return window.IntersectionObserver&&(l=new IntersectionObserver(a(g,f),{rootMargin:c,threshold:s})),{observe:function(){for(var e=i(r),n=0;n<e.length;n++)o(e[n])||(l?l.observe(e[n]):(g(e[n]),t(e[n]),f(e[n])))},triggerLoad:function(e){o(e)||(g(e),t(e),f(e))}}}});\n"]}