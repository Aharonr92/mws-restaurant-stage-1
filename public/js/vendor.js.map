{"version":3,"sources":["db_helper.js","register_sw.js","lozad.min.js","idb.js"],"names":["DBHelper","[object Object]","DB_NAME","DB_VERSION","RESTAURANTS_STORE_NAME","REVIEWS_STORE_NAME","DATABASE_URL","RESTAURANTS_URL","this","REVIEWS_URL","navigator","serviceWorker","idb","open","upgradeDb","createObjectStore","keyPath","autoIncrement","createIndex","unique","Promise","resolve","callback","dbPromise","then","db","transaction","objectStore","getAll","data","length","fetch","res","status","json","error","restaurants","store","map","restaurant","put","catch","id","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","reviews","review","restaurantId","fetchReviews","filteredReviews","restaurant_id","hasOwnProperty","method","body","JSON","stringify","rev","addReviewToDB","err","is_favorite","e","updateRestaurantInDB","console","log","delete","index","openCursor","loopCursor","cursor","value","deleteReviewFromDB","addReview","continue","favoriteRestaurant","window","addEventListener","updateDB","register","t","exports","module","define","amd","lozad","setAttribute","Object","assign","arguments","n","prototype","call","document","documentMode","rootMargin","threshold","load","nodeName","toLowerCase","createElement","getAttribute","src","appendChild","srcset","style","backgroundImage","loaded","o","d","u","c","s","g","f","l","IntersectionObserver","a","forEach","intersectionRatio","unobserve","target","observe","Element","NodeList","querySelectorAll","triggerLoad","promisifyRequest","request","reject","onsuccess","result","onerror","promisifyRequestCall","obj","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","defineProperty","get","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","Cursor","Index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","nativeObject","query","count","instance","items","iterateCursor","push","undefined","exp","version","upgradeCallback","indexedDB","onupgradeneeded","event","default","self"],"mappings":"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","file":"vendor.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  static get DB_NAME() {\r\n    return 'mws-restaurant'\r\n  }\r\n\r\n  static get DB_VERSION() {\r\n    return 1\r\n  }\r\n\r\n  static get RESTAURANTS_STORE_NAME() {\r\n    return 'restaurants'\r\n  }\r\n\r\n  static get REVIEWS_STORE_NAME() {\r\n    return 'reviews'\r\n  }\r\n\r\n  static get DATABASE_URL() {\r\n    return \"http://localhost:1337\";\r\n  }\r\n\r\n  static get RESTAURANTS_URL() {\r\n    return this.DATABASE_URL + \"/restaurants\";\r\n  }\r\n\r\n  static get REVIEWS_URL() {\r\n    return this.DATABASE_URL + \"/reviews\";\r\n  }\r\n\r\n\r\n  static dbPromise() {\r\n    // If the browser doesn't support service worker,\r\n    // we don't care about having a database\r\n    if (!navigator.serviceWorker) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return idb.open(this.DB_NAME, this.DB_VERSION, upgradeDb => {\r\n      const restaurantsStore = upgradeDb.createObjectStore(this.RESTAURANTS_STORE_NAME, {\r\n        keyPath: 'id',\r\n        autoIncrement: true\r\n      });\r\n      restaurantsStore.createIndex('hesUpdates', 'hesUpdates', {unique: false});\r\n\r\n      const reviewsStore = upgradeDb.createObjectStore(this.REVIEWS_STORE_NAME, {keyPath: 'id', autoIncrement: true});\r\n      reviewsStore.createIndex('hesUpdates', 'hesUpdates', {unique: false});\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    DBHelper.dbPromise().then(db => {\r\n      if (!db) return;\r\n      return db.transaction(DBHelper.RESTAURANTS_STORE_NAME).objectStore(DBHelper.RESTAURANTS_STORE_NAME).getAll();\r\n    }).then(data => {\r\n      if (data && data.length > 0) return callback(null, data);\r\n      else {\r\n        fetch(this.RESTAURANTS_URL)\r\n          .then(res => {\r\n            if (res.status !== 200) callback(error = (`error fetching restaurants data. status: ${res.status}`), null);\r\n            else return res.json();\r\n          })\r\n          .then(restaurants => {\r\n            DBHelper.dbPromise().then(db => {\r\n              if (!db) return;\r\n              const store = db.transaction(DBHelper.RESTAURANTS_STORE_NAME, 'readwrite').objectStore(DBHelper.RESTAURANTS_STORE_NAME);\r\n              restaurants.map(restaurant => {\r\n                restaurant['hesUpdates'] = 'false';\r\n                store.put(restaurant);\r\n              });\r\n            });\r\n            return callback(null, restaurants);\r\n          })\r\n          .catch(error => callback(error, null));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type === cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood === neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine !== 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type === cuisine);\r\n        }\r\n        if (neighborhood !== 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood === neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant && restaurant.photograph ? restaurant.photograph : 'no_restaurant_img'}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    return new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchReviews(callback) {\r\n    DBHelper.dbPromise().then(db => {\r\n      if (!db) return;\r\n      return db.transaction(DBHelper.REVIEWS_STORE_NAME).objectStore(DBHelper.REVIEWS_STORE_NAME).getAll();\r\n    }).then(data => {\r\n      if (data && data.length > 0) return callback(null, data);\r\n      else {\r\n        fetch(this.REVIEWS_URL)\r\n          .then(res => {\r\n            if (res.status !== 200) callback(error = (`error fetching reviews data. status: ${res.status}`), null);\r\n            else return res.json();\r\n          })\r\n          .then(reviews => {\r\n            DBHelper.dbPromise().then(db => {\r\n              if (!db) return;\r\n              const store = db.transaction(DBHelper.REVIEWS_STORE_NAME, 'readwrite').objectStore(DBHelper.REVIEWS_STORE_NAME);\r\n              reviews.map(review => {\r\n                review['hesUpdates'] = 'false';\r\n                store.put(review);\r\n              });\r\n            });\r\n            return callback(null, reviews);\r\n          })\r\n          .catch(error => callback(error, null));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a review by its ID.\r\n   */\r\n  static fetchReviewsByRestaurantId(restaurantId, callback) {\r\n    // fetch all reviews with proper error handling.\r\n    DBHelper.fetchReviews((error, reviews) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const filteredReviews = reviews.filter(r => r.restaurant_id == restaurantId);\r\n        if (filteredReviews) { // Got the reviews\r\n          callback(null, filteredReviews);\r\n        } else { // Reviews does not exist in the database\r\n          callback('Reviews does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  static addReview(review) {\r\n    if (!review) return;\r\n    review.hasOwnProperty('id') && delete review.id;\r\n\r\n    fetch(DBHelper.REVIEWS_URL, {\r\n      method: 'POST',\r\n      body: JSON.stringify(review)\r\n    })\r\n      .then(res => {\r\n        if (res.status !== 201) {\r\n          res['hesUpdates'] = 'true';\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(rev => {\r\n        rev['hesUpdates'] = 'false';\r\n        DBHelper.addReviewToDB(rev, () => {\r\n        });\r\n      })\r\n      .catch(err => {\r\n        review['hesUpdates'] = 'true';\r\n        DBHelper.addReviewToDB(review, () => {\r\n        });\r\n        return review;\r\n      });\r\n    return review;\r\n  }\r\n\r\n  static favoriteRestaurant(restaurant, is_favorite) {\r\n    if (!restaurant) return;\r\n    restaurant['is_favorite'] = is_favorite;\r\n    fetch(`${DBHelper.RESTAURANTS_URL}/${restaurant.id}/?is_favorite=${is_favorite}`, {method: 'PUT'})\r\n      .then(res => {\r\n        restaurant['hesUpdates'] = res.status !== 200 ? 'true' : 'false';\r\n      })\r\n      .catch(e => {\r\n        restaurant['hesUpdates'] = 'true'\r\n      });\r\n\r\n    DBHelper.updateRestaurantInDB(restaurant);\r\n  }\r\n\r\n  static addReviewToDB(review, callback) {\r\n    DBHelper.dbPromise().then(db => {\r\n      if (!db) return;\r\n      db.transaction(DBHelper.REVIEWS_STORE_NAME, 'readwrite').objectStore(DBHelper.REVIEWS_STORE_NAME).put(review);\r\n      callback()\r\n    }).catch(err => console.log(err))\r\n  }\r\n\r\n  static deleteReviewFromDB(id, callback) {\r\n    DBHelper.dbPromise().then(db => {\r\n      if (!db) return;\r\n      db.transaction(DBHelper.REVIEWS_STORE_NAME, 'readwrite').objectStore(DBHelper.REVIEWS_STORE_NAME).delete(id);\r\n      callback()\r\n    }).catch(err => console.log(err))\r\n  }\r\n\r\n  static updateRestaurantInDB(restaurant, callback) {\r\n    DBHelper.dbPromise().then(db => {\r\n      if (!db) return;\r\n      db.transaction(DBHelper.RESTAURANTS_STORE_NAME, 'readwrite').objectStore(DBHelper.RESTAURANTS_STORE_NAME).put(restaurant);\r\n      callback();\r\n    }).catch(err => console.log(err))\r\n  }\r\n\r\n  static updateDB() {\r\n\r\n    DBHelper.dbPromise().then(db => {\r\n      if (!db) return;\r\n      return db.transaction(DBHelper.REVIEWS_STORE_NAME).objectStore(DBHelper.REVIEWS_STORE_NAME).index('hesUpdates').openCursor('true');\r\n    }).then(function loopCursor(cursor) {\r\n      if (!cursor) return;\r\n      let review = cursor.value;\r\n      DBHelper.deleteReviewFromDB(review.id, () => {\r\n        review['hesUpdates'] = 'false';\r\n        DBHelper.addReview(review);\r\n      });\r\n      return cursor.continue().then(loopCursor);\r\n    });\r\n\r\n    DBHelper.dbPromise().then(db => {\r\n      if (!db) return;\r\n      return db.transaction(DBHelper.RESTAURANTS_STORE_NAME).objectStore(DBHelper.RESTAURANTS_STORE_NAME).index('hesUpdates').openCursor('true');\r\n    }).then(function loopCursor(cursor) {\r\n      if (!cursor) return;\r\n      let restaurant = cursor.value;\r\n      restaurant['hesUpdates'] = 'false';\r\n      DBHelper.favoriteRestaurant(restaurant, restaurant['is_favorite']);\r\n      return cursor.continue().then(loopCursor);\r\n    });\r\n  }\r\n}\r\n\r\nwindow.addEventListener('online', (e) => {\r\n  DBHelper.updateDB()\r\n});","if ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js')\n}\n\n//\n// .then(registration => {\n//   registration.addEventListener('updatefound', () => {\n//     const installingWorker = registration.installing;\n//     installingWorker.addEventListener('statechange', () => {\n//       if (installingWorker.state === 'installed') {\n//         if (navigator.serviceWorker.controller) {\n//           // At this point, the old content will have been purged and\n//           // the fresh content will have been added to the cache.\n//           // It's the perfect time to display a \"New content is\n//           // available; please refresh.\" message in your web app.\n//\n//           function refresh() {\n//             installingWorker.postMessage({action: 'skipWaiting'});\n//           }\n//\n//           showSnackbar(\"New version availableNew version available<button onclick='refresh()'>refresh</button>\")\n//           console.log('New content is available; please refresh.');\n//         } else {\n//           // At this point, everything has been precached.\n//           // It's the perfect time to display a\n//           // \"Content is cached for offline use.\" message.\n//           console.log('Content is cached for offline use.');\n//         }\n//       }\n//     });\n//   });\n// })\n//\n// showSnackbar = (innerHtml) => {\n//   if (!innerHtml) return;\n//   const x = document.getElementById(\"snackbar\");\n//   x.innerHTML = innerHtml;\n//   x.className = \"show\";\n//   setTimeout(function () {\n//     x.className = x.className.replace(\"show\", \"\");\n//   }, 3000);\n// };\n","/*! lozad.js - v1.3.0 - 2018-02-16\n* https://github.com/ApoorvSaxena/lozad.js\n* Copyright (c) 2018 Apoorv Saxena; Licensed MIT */\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.lozad=e()}(this,function(){\"use strict\";function t(t){t.setAttribute(\"data-loaded\",!0)}var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},r=document.documentMode,n={rootMargin:\"0px\",threshold:0,load:function(t){if(\"picture\"===t.nodeName.toLowerCase()){var e=document.createElement(\"img\");r&&t.getAttribute(\"data-iesrc\")&&(e.src=t.getAttribute(\"data-iesrc\")),t.appendChild(e)}t.getAttribute(\"data-src\")&&(t.src=t.getAttribute(\"data-src\")),t.getAttribute(\"data-srcset\")&&(t.srcset=t.getAttribute(\"data-srcset\")),t.getAttribute(\"data-background-image\")&&(t.style.backgroundImage=\"url(\"+t.getAttribute(\"data-background-image\")+\")\")},loaded:function(){}},o=function(t){return\"true\"===t.getAttribute(\"data-loaded\")},a=function(e,r){return function(n,a){n.forEach(function(n){n.intersectionRatio>0&&(a.unobserve(n.target),o(n.target)||(e(n.target),t(n.target),r(n.target)))})}},i=function(t){return t instanceof Element?[t]:t instanceof NodeList?t:document.querySelectorAll(t)};return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\".lozad\",d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=e({},n,d),c=u.rootMargin,s=u.threshold,g=u.load,f=u.loaded,l=void 0;return window.IntersectionObserver&&(l=new IntersectionObserver(a(g,f),{rootMargin:c,threshold:s})),{observe:function(){for(var e=i(r),n=0;n<e.length;n++)o(e[n])||(l?l.observe(e[n]):(g(e[n]),t(e[n]),f(e[n])))},triggerLoad:function(e){o(e)||(g(e),t(e),f(e))}}}});\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}