{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","mapLoaded","document","addEventListener","fetchRestaurantFromURL","error","console","fillBreadcrumb","lazyLoadImages","getElementById","style","backgroundImage","latlng","lat","lng","window","initMap","self","google","maps","Map","zoom","center","scrollwheel","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","name","address","image","className","setAttribute","imageUrlForRestaurant","alt","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","tabIndex","day","appendChild","time","reviews","container","noReviews","ul","forEach","review","createReviewHTML","li","rating","i","star","date","comments","breadcrumb","url","location","href","replace","results","RegExp","exec","decodeURIComponent","lozad","observe","loadRealMap","script","type","src","body"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant, map;\nlet mapLoaded = false;\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      fillBreadcrumb();\n      lazyLoadImages();\n      document.getElementById('map').style.backgroundImage = `url(https://maps.googleapis.com/maps/api/staticmap?size=311x640&markers=size:mid|${restaurant.latlng.lat},${restaurant.latlng.lng}&key=AIzaSyDKsWF94cMGUciBs96YIpbCmexfRKT75x4&scale=2)`\n    }\n  });\n});\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  mapLoaded = true;\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 16,\n    center: self.restaurant.latlng,\n    scrollwheel: false\n  });\n  DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n};\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    callback('No restaurant id in URL', null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'lozad';\n  image.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant));\n  image.alt = `photo of ${restaurant.name} restaurant`;\n\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n    row.tabIndex = 0;\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.tabIndex = 0;\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  name.className = 'review-name';\n  li.appendChild(name);\n\n  const rating = document.createElement('span');\n  rating.setAttribute('aria-label', `Rating: ${review.rating}`);\n  for (let i = 0; i < 5; i++) {\n    const star = document.createElement('span');\n    star.innerHTML = 'â˜…';\n    if (i < review.rating)\n      star.className = 'reviews-rating';\n    rating.appendChild(star)\n  }\n  li.appendChild(rating);\n\n  const date = document.createElement('span');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n\n\n/**\n * Lazy load images\n */\nlazyLoadImages = () => {\n  const observer = lozad();\n  observer.observe();\n};\n\nloadRealMap = () => {\n  if (mapLoaded) return;\n  const script = document.createElement('script');\n  script.type = 'text/javascript';\n  script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyDKsWF94cMGUciBs96YIpbCmexfRKT75x4&libraries=places&callback=initMap';\n  document.body.appendChild(script);\n};\n"]}